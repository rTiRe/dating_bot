services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 3s
      timeout: 10s
      retries: 3
    ports:
      - 127.0.0.1:5672:5672
      - 127.0.0.1:15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - external_network

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # web console
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/ready" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - minio_data:/data
    networks:
      - external_network
      - profiles_network
      - accounts_network

  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  accounts_db:
    image: 'postgres:15.5'
    container_name: accounts_db
    environment:
      - POSTGRES_DB=${ACCOUNTS_DB_NAME}
      - POSTGRES_USER=${ACCOUNTS_DB_USER}
      - POSTGRES_PASSWORD=${ACCOUNTS_DB_PASS}
    restart: unless-stopped
    ports:
      - 127.0.0.1:5442:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "test", "-U", "${ACCOUNTS_DB_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - accounts_pgdata:/var/lib/postgresql/data
    networks:
      - accounts_network

  accounts_service:
    build: ./accounts_service
    container_name: accounts_service
    command: bash -c "poetry run yoyo apply -b && poetry run python -m src"
    stop_signal: SIGINT
    restart: unless-stopped
    depends_on:
      accounts_db:
        condition: service_healthy
    env_file:
      - accounts_service/config/.env
    volumes:
      - ./accounts_service:/usr/src/dating/accounts_service
    ports:
      - "8001:8001"
      - "8010:1337"
    networks:
      - accounts_network
      - profiles_network
      - external_network

  profiles_db:
    image: 'postgres:15.5'
    container_name: profiles_db
    environment:
      - POSTGRES_DB=${PROFILES_DB_NAME}
      - POSTGRES_USER=${PROFILES_DB_USER}
      - POSTGRES_PASSWORD=${PROFILES_DB_PASS}
    restart: unless-stopped
    ports:
      - 127.0.0.1:5452:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${PROFILES_DB_NAME}", "-U", "${PROFILES_DB_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - profiles_pgdata:/var/lib/postgresql/data
    networks:
      - profiles_network

  profiles_service:
    build: ./profiles_service
    container_name: profiles_service
    command: bash -c "poetry run yoyo apply -b && poetry run python -m src"
    stop_signal: SIGINT
    restart: no
    depends_on:
      profiles_db:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file:
      - profiles_service/config/.env
    environment:
      MINIO_ENDPOINT: minio:9000
      MINIO_SECURE: "false"
      MINIO_BUCKET: "profiles-images"
    volumes:
      - ./profiles_service:/usr/src/dating/profiles_service
    ports:
      - "8002:8002"
      - "8011:1337"
    networks:
      - accounts_network
      - profiles_network
      - external_network

  bot_service:
    build: ./bot_service
    container_name: bot_service
    command: bash -c "poetry run python -m src"
    stop_signal: SIGINT
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
      accounts_service:
        condition: service_started
      profiles_service:
        condition: service_started
    env_file:
      - bot_service/config/.env
    volumes:
      - ./bot_service:/usr/src/dating/bot_service
    networks:
      - bot_network
      - external_network

networks:
  accounts_network:
    driver: bridge
  bot_network:
    driver: bridge
  profiles_network:
    driver: bridge
  external_network:
    driver: bridge

volumes:
  accounts_pgdata:
  profiles_pgdata:
  rabbitmq_data:
  minio_data: